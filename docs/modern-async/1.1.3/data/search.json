{"list":[{"title":"CancelledError","link":"<a href=\"CancelledError.html\">CancelledError</a>","description":"<p>Constructs a new instance.</p>"},{"title":"Deferred","link":"<a href=\"Deferred.html\">Deferred</a>","description":"<p>Constructs a deferred object.</p>"},{"title":"Deferred#promise","link":"<a href=\"Deferred.html#promise\">promise</a>","description":"<p>(Read-only) The promise.</p>"},{"title":"Deferred#reject","link":"<a href=\"Deferred.html#reject\">reject</a>","description":"<p>(Read-only) The reject function</p>"},{"title":"Deferred#resolve","link":"<a href=\"Deferred.html#resolve\">resolve</a>","description":"<p>(Read-only) The resolve function.</p>"},{"title":"Delayer","link":"<a href=\"Delayer.html\">Delayer</a>","description":"<p>Constructs a new <code>Delayer</code> by specifying its trigger time.</p>"},{"title":"Delayer#checkDelay","link":"<a href=\"Delayer.html#checkDelay\">checkDelay</a>","description":"<p>Checks if a delay must be applied according to the internal timer. If that's the case this method\nwill call <code>delay()</code> and return <code>true</code>. If not it will do nothing and return <code>false</code>.</p>"},{"title":"Delayer#reset","link":"<a href=\"Delayer.html#reset\">reset</a>","description":"<p>Resets the internal timer to the current time.</p>"},{"title":"Delayer#triggerTime","link":"<a href=\"Delayer.html#triggerTime\">triggerTime</a>","description":"<p>The trigger time of this <code>Delayer</code> in milliseconds. The trigger time represent the\nmaximum amount of time before a call to <code>checkDelay()</code> decide to schedule a new task in the event loop.</p>"},{"title":"Queue","link":"<a href=\"Queue.html\">Queue</a>","description":"<p>Constructs a queue with the given concurrency</p>"},{"title":"Queue#cancelAllPending","link":"<a href=\"Queue.html#cancelAllPending\">cancelAllPending</a>","description":"<p>Cancels all pending tasks. Their corresponding promises will be rejected with a <code>CancelledError</code>. This method will\nnot alter tasks that are already running.</p>"},{"title":"Queue#concurrency","link":"<a href=\"Queue.html#concurrency\">concurrency</a>","description":"<p>(Read-only) The concurrency of the queue.</p>"},{"title":"Queue#exec","link":"<a href=\"Queue.html#exec\">exec</a>","description":"<p>Puts a task at the end of the queue. When the task is executed and completes the returned promise will be terminated\naccordingly.</p>"},{"title":"Queue#execCancellable","link":"<a href=\"Queue.html#execCancellable\">execCancellable</a>","description":"<p>Puts a task at the end of the queue. When the task is executed and completes the returned promise will be terminated\naccordingly.</p>\n<p>This function returns both a promise and a cancel function. The cancel function allows to cancel the pending task,\nbut only if it wasn't started yet. Calling the cancel function on a task that it already running has no effect.\nWhen a task is cancelled its corresponding promise will be rejected with a <code>CancelledError</code>.</p>"},{"title":"Queue#pending","link":"<a href=\"Queue.html#pending\">pending</a>","description":"<p>(Read-only) The number of pending tasks.</p>"},{"title":"Queue#running","link":"<a href=\"Queue.html#running\">running</a>","description":"<p>(Read-only) The current number of tasks that are processing.</p>"},{"title":"Scheduler","link":"<a href=\"Scheduler.html\">Scheduler</a>","description":"<p>Constructs a Scheduler.</p>"},{"title":"Scheduler#concurrency","link":"<a href=\"Scheduler.html#concurrency\">concurrency</a>","description":"<p>(Read-only) The maximum number of asynchronous tasks that can run in parallel.</p>\n<p>This parameter only matters in the event where some tasks may take more time to execute\nthan the delay. If the concurrency allows it the new task will be run concurrently. If not\nit may be scheduled to be executed depending on the configuration of the <code>maxPending</code> parameter.</p>\n<p>Defaults to 1.</p>"},{"title":"Scheduler#delay","link":"<a href=\"Scheduler.html#delay\">delay</a>","description":"<p>(Read-only) The delay between two triggering of the scheduler, in milliseconds.</p>"},{"title":"Scheduler#maxPending","link":"<a href=\"Scheduler.html#maxPending\">maxPending</a>","description":"<p>(Read-only) The maximum number of tasks that can be pending.</p>\n<p>In the event where one of the tasks triggered by the scheduler takes more time to execute than\nthe delay the next task may or may not be run concurrently depending on the configuration of\nthe <code>concurrency</code> parameter. If the maximum concurrency was already reached the new task can\nbe scheduled to be executed as soon as the previous task finished.</p>\n<p>This parameter indicates the maximum amount of tasks that can be pending at any time. If a\ntask should be scheduled and the maximum amount of pending tasks is already reached\nthat new task will be skipped.</p>\n<p>This behavior helps to prevent cases that would lead to a infinite amount of tasks to be\npending. This could happen in extreme cases where the tasks would take systematically more\ntime to execute than the delay.</p>\n<p>Defaults to 0.</p>"},{"title":"Scheduler#start","link":"<a href=\"Scheduler.html#start\">start</a>","description":"<p>Starts the scheduler.</p>\n<p>Calling this method can trigger a task immediately depending on the configuration\nof the <code>startImmediate</code> parameter.</p>\n<p>If this method is called while the scheduler is already started it will have no effect.</p>"},{"title":"Scheduler#startImmediate","link":"<a href=\"Scheduler.html#startImmediate\">startImmediate</a>","description":"<p>(Read-only) Whether or not a triggering of the task should occur immediately when calling <code>start()</code> or not.</p>\n<p>Defaults to false.</p>"},{"title":"Scheduler#started","link":"<a href=\"Scheduler.html#started\">started</a>","description":"<p>(Read-only) Whether or not the scheduler is actually started.</p>"},{"title":"Scheduler#stop","link":"<a href=\"Scheduler.html#stop\">stop</a>","description":"<p>Stops the scheduler.</p>\n<p>If, for any reason, there were pending tasks in the scheduler they will be cancelled. On the other\nhand if they are still one or more tasks that are running they will continue to run until they\nterminate.</p>\n<p>This method is safe to call in a task if necessary.</p>\n<p>If this method is called while the scheduler is already stopped it will have no effect.</p>"},{"title":"TimeoutError","link":"<a href=\"TimeoutError.html\">TimeoutError</a>","description":"<p>Constructs a new instance.</p>"},{"title":"asyncIterableWrap","link":"<a href=\"global.html#asyncIterableWrap\">asyncIterableWrap</a>","description":"<p>Wraps an iterable or async iterable into an iterable that is guaranted to be async.</p>"},{"title":"asyncRoot","link":"<a href=\"global.html#asyncRoot\">asyncRoot</a>","description":"<p>Immediately calls an asynchronous function and redirects to an error handler if it throws an exception.\nThe error handler is optional, the default one just outputs the error in the console.</p>\n<p>This function is trivial but useful when you can't use top-level await for compatibility reasons.</p>"},{"title":"asyncWrap","link":"<a href=\"global.html#asyncWrap\">asyncWrap</a>","description":"<p>Wraps a function call that may be synchronous in a function that\nis guaranted to be async. This is a stricter version of calling a\nfunction and wrapping its result using <code>Promise.resolve()</code> as the new function also\nhandles the case where the original function throws an exception.</p>"},{"title":"delay","link":"<a href=\"global.html#delay\">delay</a>","description":"<p>A function returning a promise that will be resolved in a later task of the event loop.</p>\n<p>This function uses core-js' shim for <code>setImmediate()</code> internally.</p>"},{"title":"delayCancellable","link":"<a href=\"global.html#delayCancellable\">delayCancellable</a>","description":"<p>A function returning a promise that will be resolved in a later tick of the event loop.</p>\n<p>This function returns both a promise and cancel function in order to cancel the wait time if\nnecessary. If cancelled, the promise will be rejected with a CancelledError.</p>\n<p>This function uses core-js' shim for <code>setImmediate()</code> internally.</p>"},{"title":"every","link":"<a href=\"global.html#every\">every</a>","description":"<p>Returns <code>true</code> if all elements of an iterable pass a truth test and <code>false</code> otherwise.</p>\n<p>The iteratee will be run in parallel. If any truth test returns <code>false</code> the promise is immediately resolved.</p>\n<p>In case of exception in one of the iteratee calls the promise returned by this function will be rejected\nwith the exception. In the very specific case where a test returns <code>false</code> and an already started task throws\nan exception that exception will be plainly ignored.</p>"},{"title":"everyLimit","link":"<a href=\"global.html#everyLimit\">everyLimit</a>","description":"<p>Returns <code>true</code> if all elements of an iterable pass a truth test and <code>false</code> otherwise.</p>\n<p>The calls to <code>iteratee</code> will be performed in a queue to limit the concurrency of these calls.\nIf any truth test returns <code>false</code> the promise is immediately resolved.</p>\n<p>Whenever a test returns <code>false</code>, all the remaining tasks will be cancelled as long\nas they didn't started already. In case of exception in one of the iteratee calls the promise\nreturned by this function will be rejected with the exception and the remaining pending\ntasks will also be cancelled. In the very specific case where a test returns <code>false</code> and an\nalready started task throws an exception that exception will be plainly ignored.</p>"},{"title":"everySeries","link":"<a href=\"global.html#everySeries\">everySeries</a>","description":"<p>Returns <code>true</code> if all elements of an iterable pass a truth test and <code>false</code> otherwise.</p>\n<p>The iteratee will be run sequentially. If any truth test returns <code>false</code> the promise is\nimmediately resolved.</p>\n<p>In case of exception in one of the iteratee calls the promise returned by this function will be\nrejected with the exception and the remaining pending tasks will be cancelled.</p>"},{"title":"filter","link":"<a href=\"global.html#filter\">filter</a>","description":"<p>Returns an array of all the values in <code>iterable</code> which pass an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will perform in parallel. The results will be in the same order than in <code>iterable</code>.</p>\n<p>If any of the calls to <code>iteratee</code> throws an exception the returned promise will be rejected.</p>"},{"title":"filterGenerator","link":"<a href=\"global.html#filterGenerator\">filterGenerator</a>","description":"<p>Produces a an async iterator that will return each value or <code>iterable</code> which pass an asynchronous truth test.</p>\n<p>The iterator will perform the calls to <code>iteratee</code> in a queue to limit the concurrency of\nthese calls. The iterator will consume values from <code>iterable</code> only if slots are available in the\nqueue.</p>\n<p>If the returned iterator is not fully consumed it will stop consuming new values from <code>iterable</code> and scheduling\nnew calls to <code>iteratee</code> in the queue, but already scheduled tasks will still be executed.</p>\n<p>If <code>iterable</code> or any of the calls to <code>iteratee</code> throws an exception all pending tasks will be cancelled and the\nreturned async iterator will throw that exception.</p>"},{"title":"filterLimit","link":"<a href=\"global.html#filterLimit\">filterLimit</a>","description":"<p>Returns an array of all the values in <code>iterable</code> which pass an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will be performed in a queue to limit the concurrency of these calls.\nThe results will be in the same order than in <code>iterable</code>.</p>\n<p>If any of the calls to <code>iteratee</code> throws an exception the returned promise will be rejected and the remaining\npending tasks will be cancelled.</p>"},{"title":"filterSeries","link":"<a href=\"global.html#filterSeries\">filterSeries</a>","description":"<p>Returns an array of all the values in <code>iterable</code> which pass an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will perform sequentially. The results will be in the same order than in <code>iterable</code>.</p>\n<p>If any of the calls to <code>iteratee</code> throws an exception the returned promise will be rejected and the remaining\npending tasks will be cancelled.</p>"},{"title":"find","link":"<a href=\"global.html#find\">find</a>","description":"<p>Returns the first element of an iterable that passes an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will run in parallel.</p>\n<p>In case of exception in one of the <code>iteratee</code> calls the promise returned by this function will be\nrejected with the exception. In the very specific case where a result is found and an\nalready started task throws an exception that exception will be plainly ignored.</p>"},{"title":"findIndex","link":"<a href=\"global.html#findIndex\">findIndex</a>","description":"<p>Returns the index of the first element of an iterable that passes an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will run in parallel.</p>\n<p>In case of exception in one of the <code>iteratee</code> calls the promise returned by this function will be\nrejected with the exception. In the very specific case where a result is found and an\nalready started task throws an exception that exception will be plainly ignored.</p>"},{"title":"findIndexLimit","link":"<a href=\"global.html#findIndexLimit\">findIndexLimit</a>","description":"<p>Returns the index of the first element of an iterable that passes an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will be performed in a queue to limit the concurrency of these calls.</p>\n<p>Whenever a result is found, all the remaining tasks will be cancelled as long\nas they didn't started already. In case of exception in one of the iteratee calls the promise\nreturned by this function will be rejected with the exception and the remaining pending\ntasks will also be cancelled. In the very specific case where a result is found and an\nalready started task throws an exception that exception will be plainly ignored.</p>"},{"title":"findIndexSeries","link":"<a href=\"global.html#findIndexSeries\">findIndexSeries</a>","description":"<p>Returns the index of the first element of an iterable that passes an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will run sequentially.</p>\n<p>In case of exception in one of the <code>iteratee</code> calls the promise returned by this function will be\nrejected with the exception and the remaining pending tasks will be cancelled.</p>"},{"title":"findLimit","link":"<a href=\"global.html#findLimit\">findLimit</a>","description":"<p>Returns the first element of an iterable that passes an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will be performed in a queue to limit the concurrency of these calls.</p>\n<p>Whenever a result is found, all the remaining tasks will be cancelled as long\nas they didn't started already. In case of exception in one of the <code>iteratee</code> calls the promise\nreturned by this function will be rejected with the exception and the remaining pending\ntasks will also be cancelled. In the very specific case where a result is found and an\nalready started task throws an exception that exception will be plainly ignored.</p>"},{"title":"findSeries","link":"<a href=\"global.html#findSeries\">findSeries</a>","description":"<p>Returns the first element of an iterable that passes an asynchronous truth test.</p>\n<p>The calls to <code>iteratee</code> will run sequentially.</p>\n<p>In case of exception in one of the <code>iteratee</code> calls the promise returned by this function will be\nrejected with the exception and the remaining pending tasks will be cancelled.</p>"},{"title":"forEach","link":"<a href=\"global.html#forEach\">forEach</a>","description":"<p>Calls a function on each element of iterable.</p>\n<p>Multiple calls to <code>iteratee</code> will be performed in parallel.</p>\n<p>If any of the calls to iteratee throws an exception the returned promise will be rejected.</p>"},{"title":"forEachLimit","link":"<a href=\"global.html#forEachLimit\">forEachLimit</a>","description":"<p>Calls a function on each element of iterable.</p>\n<p>The calls to <code>iteratee</code> will be performed in a queue to limit the concurrency of these calls.</p>\n<p>If any of the calls to iteratee throws an exception the returned promise will be rejected and the remaining\npending tasks will be cancelled.</p>"},{"title":"forEachSeries","link":"<a href=\"global.html#forEachSeries\">forEachSeries</a>","description":"<p>Calls a function on each element of iterable.</p>\n<p>Multiple calls to <code>iteratee</code> will be performed sequentially.</p>\n<p>If any of the calls to iteratee throws an exception the returned promise will be rejected and the remaining\npending tasks will be cancelled.</p>"},{"title":"map","link":"<a href=\"global.html#map\">map</a>","description":"<p>Produces a new collection of values by mapping each value in <code>iterable</code> through the <code>iteratee</code> function.</p>\n<p>Multiple calls to <code>iteratee</code> will be performed in parallel.</p>\n<p>If any of the calls to iteratee throws an exception the returned promise will be rejected.</p>"},{"title":"mapGenerator","link":"<a href=\"global.html#mapGenerator\">mapGenerator</a>","description":"<p>Produces a an async iterator that will return each value or <code>iterable</code> after having processed them through\nthe <code>iteratee</code> function.</p>\n<p>The iterator will perform the calls to <code>iteratee</code> in a queue to limit the concurrency of\nthese calls. The iterator will consume values from <code>iterable</code> only if slots are available in the\nqueue.</p>\n<p>If the returned iterator is not fully consumed it will stop consuming new values from <code>iterable</code> and scheduling\nnew calls to <code>iteratee</code> in the queue, but already scheduled tasks will still be executed.</p>\n<p>If <code>iterable</code> or any of the calls to <code>iteratee</code> throws an exception all pending tasks will be cancelled and the\nreturned async iterator will throw that exception.</p>"},{"title":"mapLimit","link":"<a href=\"global.html#mapLimit\">mapLimit</a>","description":"<p>Produces a new collection of values by mapping each value in <code>iterable</code> through the <code>iteratee</code> function.</p>\n<p>The calls to <code>iteratee</code> will be performed in a queue to limit the concurrency of these calls.</p>\n<p>If any of the calls to iteratee throws an exception the returned promise will be rejected and the remaining\npending tasks will be cancelled.</p>"},{"title":"mapSeries","link":"<a href=\"global.html#mapSeries\">mapSeries</a>","description":"<p>Produces a new collection of values by mapping each value in <code>iterable</code> through the <code>iteratee</code> function.</p>\n<p>Multiple calls to <code>iteratee</code> will be performed sequentially.</p>\n<p>If any of the calls to iteratee throws an exception the returned promise will be rejected and the remaining\npending tasks will be cancelled.</p>"},{"title":"queueMicrotask","link":"<a href=\"global.html#queueMicrotask\">queueMicrotask</a>","description":"<p>An alternative to standard <code>queueMicrotask()</code> function.</p>\n<p>This is just of mirror of core-js' implementation for compatibility.</p>"},{"title":"reduce","link":"<a href=\"global.html#reduce\">reduce</a>","description":"<p>Performs a reduce operation as defined in the <code>Array.reduce()</code> method but using an asynchronous\nfunction as reducer. The reducer will be called sequentially.</p>"},{"title":"reduceRight","link":"<a href=\"global.html#reduceRight\">reduceRight</a>","description":"<p>Performs a reduce operation as defined in the <code>Array.reduceRight()</code> method but using an asynchronous\nfunction as reducer. The reducer will be called sequentially.</p>"},{"title":"sleep","link":"<a href=\"global.html#sleep\">sleep</a>","description":"<p>Waits a given amount of time.</p>\n<p>This function uses <code>setTimeout()</code> internally and has the same behavior, notably that it could resolve\nafter the asked time (depending on other tasks running in the event loop) or a few milliseconds before.</p>"},{"title":"sleepCancellable","link":"<a href=\"global.html#sleepCancellable\">sleepCancellable</a>","description":"<p>Waits a given amount of time. This function returns both a promise and cancel function in\norder to cancel the wait time if necessary. If cancelled, the promise will be rejected\nwith a <code>CancelledError</code>.</p>\n<p>This function uses <code>setTimeout()</code> internally and has the same behavior, notably that it could resolve\nafter the asked time (depending on other tasks running in the event loop) or a few milliseconds before.</p>"},{"title":"sleepPrecise","link":"<a href=\"global.html#sleepPrecise\">sleepPrecise</a>","description":"<p>Waits a given amount of time.</p>\n<p>This function is similar to <code>sleep()</code> except it ensures that the amount of time measured\nusing the <code>Date</code> object is always greater than or equal the asked amount of time.</p>\n<p>This function can imply additional delay that can be bad for performances. As such it is\nrecommended to only use it in unit tests or very specific cases. Most applications should\nbe adapted to work with the usual <code>setTimout()</code> inconsistencies even if it can trigger some\nmilliseconds before the asked delay.</p>"},{"title":"sleepPreciseCancellable","link":"<a href=\"global.html#sleepPreciseCancellable\">sleepPreciseCancellable</a>","description":"<p>Waits a given amount of time.</p>\n<p>This function returns both a promise and cancel function in order to cancel the\nwait time if necessary. If cancelled, the promise will be rejected with a <code>CancelledError</code>.</p>\n<p>This function is similar to <code>sleep()</code> except it ensures that the amount of time measured\nusing the <code>Date</code> object is always greater than or equal the asked amount of time.</p>\n<p>This function can imply additional delay that can be bad for performances. As such it is\nrecommended to only use it in unit tests or very specific cases. Most applications should\nbe adapted to work with the usual <code>setTimout()</code> inconsistencies even if it can trigger some\nmilliseconds before the asked delay.</p>"},{"title":"some","link":"<a href=\"global.html#some\">some</a>","description":"<p>Returns <code>true</code> if at least one element of an iterable pass a truth test and <code>false</code> otherwise.</p>\n<p>The calls to <code>iteratee</code> will run in parallel. If any truth test returns <code>true</code> the promise is immediately resolved.</p>\n<p>In case of exception in one of the <code>iteratee</code> calls the promise returned by this function will be rejected\nwith the exception. In the very specific case where a test returns <code>true</code> and an already started task throws\nan exception that exception will be plainly ignored.</p>"},{"title":"someLimit","link":"<a href=\"global.html#someLimit\">someLimit</a>","description":"<p>Returns <code>true</code> if at least one element of an iterable pass a truth test and <code>false</code> otherwise.</p>\n<p>The calls to <code>iteratee</code> will be performed in a queue to limit the concurrency of these calls. If any\ntruth test returns <code>true</code> the promise is immediately resolved.</p>\n<p>Whenever a test returns <code>true</code>, all the remaining tasks will be cancelled as long\nas they didn't started already. In case of exception in one of the <code>iteratee</code> calls the promise\nreturned by this function will be rejected with the exception and the remaining pending\ntasks will also be cancelled. In the very specific case where a test returns <code>true</code> and an\nalready started task throws an exception that exception will be plainly ignored.</p>"},{"title":"someSeries","link":"<a href=\"global.html#someSeries\">someSeries</a>","description":"<p>Returns <code>true</code> if all elements of an iterable pass a truth test and <code>false</code> otherwise.</p>\n<p>The calls to <code>iteratee</code> will run sequentially. If any truth test returns <code>true</code> the promise is\nimmediately resolved.</p>\n<p>In case of exception in one of the iteratee calls the promise returned by this function will be\nrejected with the exception and the remaining pending tasks will be cancelled.</p>"},{"title":"timeout","link":"<a href=\"global.html#timeout\">timeout</a>","description":"<p>Wraps a call to an asynchronous function to add a timer on it. If the delay is exceeded\nthe returned promise will be rejected with a <code>TimeoutError</code>.</p>\n<p>This function uses <code>setTimeout()</code> internally and has the same behavior, notably that it could reject\nafter the asked time (depending on other tasks running in the event loop) or a few milliseconds before.</p>"},{"title":"timeoutPrecise","link":"<a href=\"global.html#timeoutPrecise\">timeoutPrecise</a>","description":"<p>Wraps a call to an asynchronous function to add a timer on it. If the delay is exceeded\nthe returned promise will be rejected with a <code>TimeoutError</code>.</p>\n<p>This function is similar to <code>timeout()</code> except it ensures that the amount of time measured\nusing the <code>Date</code> object is always greater than or equal the asked amount of time.</p>\n<p>This function can imply additional delay that can be bad for performances. As such it is\nrecommended to only use it in unit tests or very specific cases. Most applications should\nbe adapted to work with the usual <code>setTimout()</code> inconsistencies even if it can trigger some\nmilliseconds before the asked delay.</p>"},{"title":"toArray","link":"<a href=\"global.html#toArray\">toArray</a>","description":"<p>Fully consumes an iteratable or async iterable an returns an array with all the elements it contained.</p>"}]}